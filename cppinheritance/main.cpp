#include <Windows.h>
#include <assert.h>



#include "xxstring.h"
#include "_re.h"

#include "encoding.h"

#include <fstream>

int a(xstring t);



#include <openssl/rsa.h>
#include <openssl/pem.h>
#include <openssl/crypto.h>
#include <openssl/evp.h>


extern unsigned char g_sz_rsa_private[2348] = {
	0x30,0x82,0x9,0x28,0x2,0x1,0x0,0x2,0x82,0x2,0x1,0x0,0xd3,0x7b,0x4,0xe7,0xd3,
	0x39,0xa8,0x6b,0x8,0x97,0xf0,0x5f,0x76,0x98,0xb4,0xed,0x45,0xf1,0x79,0xef,0x1f,
	0xc4,0x1c,0x45,0xac,0x9f,0x4f,0xcc,0x7d,0xb,0x26,0x78,0x24,0x6e,0x6a,0xec,0x3e,
	0xac,0xc3,0xb5,0xaf,0x5a,0xa2,0x39,0x55,0x6e,0xb7,0x2b,0xf3,0x4,0xd3,0x31,0x45,
	0xf2,0xd1,0xcf,0xb6,0x5f,0xcb,0xd8,0x27,0x11,0x66,0x10,0xe1,0x44,0x75,0xce,0x1b,
	0xed,0x4,0x2f,0x44,0x88,0x98,0x36,0x45,0x1,0xfa,0x61,0x33,0x92,0x73,0x51,0xfe,
	0xad,0x34,0x69,0xe5,0x1d,0x75,0xe3,0x7a,0x7f,0x86,0xce,0xc,0x75,0x18,0x1a,0x26,
	0x7d,0x18,0xb,0x72,0xa3,0x86,0xeb,0xb1,0xf1,0xc4,0xfe,0x1b,0x4f,0x87,0xc2,0x99,
	0xe3,0xdc,0xc8,0x67,0x7c,0xe3,0x82,0xd3,0xce,0xb2,0x40,0x3f,0xc0,0x43,0xf6,0xd5,
	0x95,0x3,0x85,0x19,0x98,0x75,0x41,0xba,0xa5,0x9d,0x81,0x1c,0x84,0x8c,0x46,0xa6,
	0x88,0xf6,0xf2,0xd7,0x8a,0x21,0xb2,0xd8,0x34,0x38,0x23,0x36,0x98,0xed,0xf2,0x63,
	0x12,0x14,0x90,0x3e,0xd5,0xf,0xe9,0xb2,0xf2,0x43,0xf0,0x73,0x36,0xa,0xd3,0x96,
	0xca,0x37,0xc,0xc0,0x7,0xa4,0x33,0x4f,0x24,0xb7,0xa0,0x6b,0x36,0x2c,0xde,0x8c,
	0x1b,0x9d,0x7,0xf7,0xc0,0x3d,0x11,0x61,0xe5,0x67,0x2b,0xa9,0xac,0x53,0xe0,0xc2,
	0x56,0x9c,0x8b,0x72,0x7f,0x96,0xd,0xc5,0x1d,0x73,0xfa,0xe2,0x96,0x88,0x62,0x74,
	0xd2,0x68,0x79,0xeb,0x95,0x8e,0x5a,0xf1,0x8c,0x4d,0x8,0x56,0xda,0x44,0xd9,0xa2,
	0xdc,0x6a,0xc4,0x5c,0x6,0xbd,0x1f,0xbf,0x6e,0xa9,0x50,0x3b,0x90,0xbd,0x22,0x38,
	0x5,0x1e,0xf1,0xf7,0x32,0x1a,0x6a,0xcd,0x8c,0x86,0x2,0x6a,0x8,0x73,0x83,0x7c,
	0x60,0x5a,0xf7,0x6a,0xf1,0x1f,0x7b,0xc2,0x72,0x1c,0x88,0x47,0x21,0xea,0x98,0x1f,
	0x53,0xe3,0xaf,0x3c,0xa1,0x89,0xf4,0xcf,0xb1,0xb5,0x6f,0xa3,0x36,0x4e,0x56,0x58,
	0xc,0x5d,0x94,0x44,0x76,0x38,0x89,0x7c,0xde,0x11,0x7a,0xb,0x89,0x18,0xc2,0x35,
	0x1,0x2e,0x3d,0xb1,0x10,0xa9,0xe2,0xfb,0xc6,0xba,0x3,0xc9,0x68,0xf8,0xf7,0x48,
	0x2e,0x54,0xa,0x48,0xa2,0x77,0xf2,0x4b,0xc0,0x76,0x11,0xf0,0x5,0x54,0xdf,0xfa,
	0xa5,0x44,0xa2,0xd5,0x38,0x3d,0xff,0xde,0x60,0x43,0x74,0xdb,0xb2,0xc7,0x71,0x30,
	0x4a,0x8c,0xc3,0xde,0xf,0x2,0x8e,0x46,0x35,0xa9,0x9d,0x7b,0x53,0xc9,0x2d,0xbf,
	0x75,0x12,0x5,0x6c,0xae,0xb5,0x78,0xcc,0x96,0x35,0x68,0x1d,0xab,0x4d,0x95,0x75,
	0xa,0x4b,0x84,0x4b,0x4a,0xe4,0x39,0x2a,0x33,0xcb,0xa9,0x64,0x57,0xad,0x71,0xb4,
	0x93,0xd3,0x30,0x17,0xd0,0x8b,0x89,0x1d,0x9,0x35,0xeb,0xb7,0xa6,0xed,0x39,0x2,
	0xdd,0x65,0x6a,0x9b,0x31,0x60,0x97,0xaf,0x4c,0xd,0x16,0xd2,0x26,0x3a,0xbc,0x72,
	0x69,0xe2,0xf6,0x86,0x88,0x3f,0x1c,0x2d,0x90,0xfd,0xb,0xf5,0xcd,0x7,0x16,0x41,
	0x32,0x0,0x6c,0x67,0x43,0x30,0x6,0xe5,0x5c,0x30,0x75,0x25,0xe6,0xc9,0xef,0xd2,
	0xa4,0x29,0x5a,0xed,0x79,0x9,0xcd,0x9d,0xe1,0xfd,0xe9,0x15,0xad,0x7e,0x42,0x9c,
	0x2f,0x93,0xb,0x52,0xb9,0xf9,0xd5,0x43,0x3f,0xd9,0x47,0x2,0x3,0x1,0x0,0x1,
	0x2,0x82,0x2,0x0,0x7,0x88,0x14,0xe,0xa5,0x89,0x22,0x24,0x5d,0xb3,0xfb,0x8d,
	0x8a,0xcd,0xb9,0x73,0xd1,0xcf,0xdd,0xc5,0xd4,0x5d,0xc9,0x9b,0xf9,0x9f,0xda,0xd9,
	0xaf,0x82,0x5c,0x26,0x5f,0x35,0xc7,0x7d,0xe,0x66,0x5c,0xb9,0xf5,0xba,0xc6,0x98,
	0x40,0x20,0xa7,0x49,0x5b,0x68,0x4a,0x95,0x30,0xa6,0x8b,0x2e,0x58,0x92,0x64,0xd2,
	0x17,0xe2,0x18,0xbe,0x75,0x27,0x59,0x2,0xb4,0x1f,0xe6,0xcc,0x40,0x26,0x95,0x35,
	0x29,0x93,0xfe,0x74,0xc3,0xbf,0x6d,0x77,0xf8,0x17,0xf7,0xb,0xe6,0x6a,0xfc,0x2d,
	0xd3,0xc9,0x2,0xe6,0x7,0xaf,0x8b,0xe2,0x32,0x88,0xb5,0xf8,0x82,0x66,0xac,0x81,
	0x6c,0x5e,0xed,0xe3,0x16,0xd9,0xe8,0x3d,0xd7,0xf9,0x33,0x7d,0xb7,0xa1,0xcd,0x0,
	0x75,0xc6,0xa0,0xb6,0x85,0xe,0xb5,0xdc,0xee,0x92,0x56,0x3,0xc1,0x7b,0x9a,0x81,
	0x72,0xc2,0x3f,0x2f,0xbf,0xf2,0x40,0x84,0xab,0x9d,0xa9,0x1d,0xd0,0xeb,0x4c,0x73,
	0xf0,0x1b,0x3b,0xfc,0x95,0xf,0x31,0x3a,0x36,0xa9,0x8,0x2e,0x72,0xee,0x67,0x98,
	0xad,0x14,0xcf,0xb2,0x9a,0x87,0xcc,0x2e,0xe8,0xe9,0xde,0xb8,0x7,0x86,0xbe,0x24,
	0x4d,0xa7,0x43,0x1a,0xe5,0x76,0x92,0x76,0x82,0x8a,0xe1,0x36,0xcd,0x6d,0xfd,0x3e,
	0xc7,0x3b,0xc2,0x46,0xdd,0xce,0x13,0x56,0xa7,0xd5,0x29,0xd2,0x15,0x8b,0xd1,0xae,
	0x3f,0xdc,0xe2,0xaa,0x86,0xb3,0x51,0xbc,0x1f,0xe8,0xf6,0x6b,0x91,0x26,0x4c,0x61,
	0x94,0xc4,0xa8,0x61,0xa9,0xa6,0x30,0x59,0x87,0xe1,0x4d,0xb4,0x1c,0x8a,0xe8,0xe5,
	0x5e,0x8d,0xf4,0x5d,0xa4,0x80,0x72,0x2,0x4,0x43,0x4b,0xcd,0x99,0xa5,0x4b,0xe8,
	0xc2,0xe5,0x74,0xc8,0x90,0x10,0x27,0x33,0x4e,0x5a,0x71,0x29,0xb1,0x44,0x35,0x91,
	0x23,0xc,0xaa,0xa4,0x60,0x5,0xea,0xe,0x35,0xf9,0xcb,0x7e,0x3e,0x56,0x17,0xf6,
	0xd2,0xa2,0x43,0x4c,0x15,0xc8,0x2,0x45,0x49,0x88,0x9c,0xfd,0x8,0x5f,0x3b,0x9b,
	0xeb,0x24,0xeb,0x59,0xcf,0x3b,0xd3,0x4e,0x9a,0x7c,0xe5,0xcb,0x14,0xd4,0x93,0x72,
	0x1a,0x64,0x1b,0x7b,0xca,0xe8,0xb7,0xff,0x1b,0xd1,0xdf,0x96,0x7c,0xbd,0x1e,0x69,
	0xcd,0x93,0x8d,0x78,0x81,0x8e,0xb6,0xcf,0xbe,0x10,0x75,0x39,0x12,0xaf,0xc9,0xda,
	0x5a,0x9b,0xd3,0xbf,0xe7,0xf1,0x74,0x16,0x42,0x4e,0xa4,0xa7,0xc8,0x93,0xee,0x73,
	0xc1,0xd1,0xf2,0x40,0xc4,0x1d,0x9f,0xaf,0xd0,0x2e,0x3b,0x80,0xe0,0xb6,0x23,0xfe,
	0x43,0x21,0x9,0xa1,0xcb,0xab,0xf2,0x35,0xa6,0x48,0x24,0xf6,0xd8,0x41,0xcf,0x28,
	0x99,0xbd,0x55,0x43,0x12,0x5c,0x78,0xe5,0xb5,0x30,0x93,0x74,0xa9,0x11,0x1c,0xc4,
	0xff,0x48,0xb1,0x3b,0x49,0xc6,0x2c,0x52,0x67,0x4b,0x6b,0xaa,0xb6,0x8d,0x78,0x6c,
	0x1a,0x46,0x83,0xdb,0xdd,0xd3,0xf5,0x74,0xac,0xa,0x58,0x88,0xe7,0xdc,0x2b,0xdc,
	0x1f,0x6a,0xd3,0x9f,0xb4,0x2d,0xa,0x25,0xd8,0x9a,0xa3,0xf5,0xf1,0x66,0x93,0x53,
	0x15,0x71,0xff,0x47,0xae,0x32,0x6e,0x9,0x8b,0x97,0x27,0x12,0xf9,0x12,0x89,0x91,
	0x30,0x7,0xce,0x99,0x94,0xce,0x93,0x8d,0x60,0xec,0x90,0x77,0x32,0x22,0x14,0x0,
	0xfb,0xdb,0x81,0x31,0x2,0x82,0x1,0x1,0x0,0xfc,0x8a,0x99,0xfa,0xf2,0x66,0xb4,
	0xc8,0x41,0x6c,0x51,0xa3,0xc,0xb8,0x13,0xb9,0xf2,0x7a,0x3c,0x70,0x20,0x53,0x4,
	0xd7,0x6d,0x8c,0xb4,0x40,0x49,0xf1,0x91,0xd2,0x91,0x63,0xdd,0xe,0xa2,0xc2,0x85,
	0x8,0x9f,0xae,0x67,0x95,0xb5,0x2f,0xc7,0xa3,0xb3,0xd4,0xa1,0xeb,0x36,0x15,0x1f,
	0x4,0xd4,0xef,0x96,0xba,0x95,0x77,0xb9,0xd5,0x4a,0xd4,0xd7,0xe9,0x48,0xd9,0x5a,
	0x74,0x32,0xc1,0xa3,0xe2,0xe6,0x1,0xc1,0x8a,0xe7,0x13,0x1b,0x2e,0x86,0xa8,0x5e,
	0xcf,0x29,0xda,0x71,0xfe,0x99,0xbd,0xcb,0x45,0xb8,0x24,0xd8,0x92,0x5b,0x3,0x15,
	0x2,0x3e,0xe1,0x34,0x50,0x78,0x72,0x37,0xfb,0xbd,0xe2,0x8e,0x5b,0x91,0x6d,0x6b,
	0xb1,0xdd,0x42,0x93,0x10,0xe1,0x80,0x4b,0xa1,0x17,0xb4,0xea,0x8f,0x1a,0xb7,0xef,
	0x7c,0x2c,0xaa,0x2d,0xe,0xdc,0x8,0x8e,0x24,0x23,0x1b,0x19,0x28,0x33,0x8c,0x1b,
	0x55,0xab,0x75,0x19,0xb7,0xc2,0xaa,0xa7,0xb8,0x63,0xd1,0x38,0x2a,0xf8,0xa,0x65,
	0xd3,0xfd,0xc,0x24,0x8,0x2e,0xbf,0xb9,0xd3,0x3,0x55,0x84,0x86,0xad,0xc3,0xea,
	0xd5,0xc4,0xc,0xc5,0xf7,0xc8,0xe2,0xbd,0xc4,0xf3,0x62,0x81,0x99,0xd0,0x79,0x8,
	0xf3,0x5b,0x77,0x7b,0x50,0x23,0x15,0x59,0x95,0xe,0x88,0xb3,0x6b,0xc2,0x3e,0x27,
	0x15,0x6c,0xaa,0x5e,0x18,0xc8,0xc2,0x76,0x53,0x55,0xf8,0x89,0xad,0x76,0x20,0x4e,
	0x1d,0xa5,0xf,0x86,0x21,0xd7,0xa5,0x6d,0xce,0x44,0xce,0xc2,0x8a,0x58,0xf,0xd,
	0x3a,0xf7,0xb1,0xad,0xf4,0x99,0x35,0xd6,0xc5,0x2,0x82,0x1,0x1,0x0,0xd6,0x60,
	0x75,0xcd,0xbd,0xaf,0xf4,0xec,0x59,0x1a,0x11,0xd2,0xa2,0x18,0x43,0xfe,0xaa,0xcf,
	0x2,0x44,0x8b,0xe6,0xc7,0xf6,0xb,0x39,0x1c,0xc5,0x62,0x5e,0x22,0x9d,0xb9,0xe0,
	0xec,0x66,0x2a,0x4e,0x15,0x28,0xb7,0x3c,0x96,0xc1,0x18,0x31,0xde,0x2e,0xf8,0x5d,
	0x7f,0xf6,0xe3,0xe5,0x6b,0x21,0x62,0x55,0xb7,0x2e,0x6,0xad,0x5c,0xd4,0x12,0x59,
	0x28,0x3b,0x38,0x8c,0xb4,0x6b,0x89,0x50,0x87,0x5a,0xa,0xff,0x55,0xee,0xdc,0x23,
	0x17,0xef,0x62,0x6e,0x1c,0xad,0x5f,0xc1,0xc1,0x30,0x75,0xf9,0x8e,0xee,0x8b,0xc2,
	0x9c,0x7f,0xfb,0x4e,0x77,0x69,0x51,0x25,0x2e,0xbe,0xb,0x88,0x0,0x18,0x68,0xe8,
	0x21,0x6c,0xaa,0x64,0x27,0x2a,0x6f,0xd4,0x38,0x3e,0x67,0xcf,0xe7,0x2,0xed,0xff,
	0x69,0x8a,0x41,0xcc,0xbe,0x9a,0x56,0x48,0x5,0x30,0x57,0xbb,0x6a,0xd9,0x39,0x54,
	0x8c,0xe0,0x26,0x50,0x6c,0x66,0x35,0x97,0x1d,0xd1,0xd0,0x2e,0x36,0x8b,0x9,0xc9,
	0xe2,0x80,0x33,0x66,0xea,0x7b,0x6a,0xa4,0x2c,0xeb,0xc1,0x92,0x9,0xcf,0x1b,0x42,
	0x7b,0x47,0x8b,0x15,0x34,0x96,0xca,0x66,0x4e,0x8d,0x2d,0x6b,0xc,0xcf,0x61,0xbe,
	0xc1,0x9f,0x11,0x7c,0x86,0x4b,0xf4,0x53,0x43,0x6f,0x8c,0x3e,0x52,0x3d,0xab,0xbc,
	0xb9,0x22,0xa0,0x3e,0x26,0xee,0x69,0x51,0xe2,0xa3,0xa9,0x88,0xc1,0xa0,0x39,0x6e,
	0xfe,0x3b,0x9a,0x14,0x90,0xa4,0x26,0x3e,0xaa,0xf7,0xb8,0x16,0x8b,0x20,0x5d,0x77,
	0x5f,0x5f,0x26,0xbc,0xff,0x5e,0x70,0x63,0xf9,0xf0,0x8,0xf8,0x90,0x9b,0x2,0x82,
	0x1,0x1,0x0,0xc4,0x52,0xeb,0x89,0x8e,0xd0,0x11,0x52,0x6c,0xa9,0xcc,0x7d,0x38,
	0xf2,0x11,0x43,0xc9,0x21,0x5,0xc3,0x15,0x1d,0xf4,0xf1,0x94,0x94,0x81,0xbc,0x48,
	0xbf,0xa7,0x61,0x4e,0xed,0x97,0x78,0x3d,0x47,0x83,0x2c,0x45,0x16,0xcc,0x28,0x32,
	0x6,0xc6,0xe8,0x98,0x70,0x80,0xbf,0xdd,0xf7,0x65,0x79,0xd8,0x1f,0xb9,0xc9,0xab,
	0x50,0xbc,0x2,0xf8,0x7d,0xa6,0xac,0x10,0x9a,0x8,0x1b,0xb5,0x29,0x9c,0x42,0x54,
	0x14,0xa1,0x65,0x5e,0x66,0x18,0x7,0x7f,0x5f,0x7c,0xf5,0x7,0xd0,0x6e,0x36,0x43,
	0x46,0xac,0xb3,0xb2,0x87,0xd2,0x65,0x54,0xa3,0x7c,0xbd,0x96,0x2c,0x75,0x2,0xe9,
	0xdf,0xc1,0x6d,0xcf,0x1c,0x45,0x17,0x22,0x63,0x32,0x9,0xbf,0xbc,0x75,0x9f,0xf5,
	0xee,0x4a,0xdd,0x1d,0x14,0xe4,0x14,0x3,0xed,0x62,0x1b,0xe2,0x8d,0x19,0x22,0x28,
	0x23,0xee,0x7c,0x61,0x5e,0x3b,0x9c,0x69,0x16,0x4e,0x59,0xb7,0x44,0xfd,0x8d,0x41,
	0xa4,0x71,0x66,0x83,0x12,0xae,0xdb,0x98,0xa0,0x5c,0xb1,0x4,0x53,0x5f,0xdf,0x8c,
	0x98,0x37,0xd9,0xb7,0x9,0xd0,0x50,0xf2,0xdd,0xf,0xbe,0xc6,0xfe,0x37,0x18,0x7d,
	0xee,0xe7,0x20,0x29,0x25,0x37,0x23,0x60,0x51,0xf7,0x87,0x58,0x5f,0xf6,0x59,0x42,
	0x2c,0xe2,0xcb,0x61,0xd5,0x1b,0xc6,0x75,0xe6,0xe3,0x73,0x60,0x5a,0xc1,0x73,0xfa,
	0xfe,0x52,0x6,0x4f,0x1b,0x3b,0xcc,0xc1,0xbc,0x33,0x7e,0x10,0x47,0x95,0x3a,0xd1,
	0xee,0x25,0x2,0xe9,0xb2,0xe2,0xc1,0xb1,0xdb,0x61,0xa9,0xa9,0xcd,0x53,0x32,0x87,
	0xb8,0xb7,0x11,0x2,0x82,0x1,0x0,0x2f,0x85,0xb2,0x97,0xa9,0x35,0x18,0x56,0x4c,
	0x6a,0x3b,0x9,0x36,0x65,0xaa,0xad,0x9,0xb0,0x5a,0x10,0x57,0xf3,0x10,0xe0,0xba,
	0x1c,0x2f,0x4,0x92,0x89,0xcb,0xa2,0xab,0x51,0xf1,0x15,0xb4,0xcb,0x1a,0x65,0xac,
	0x39,0x2,0x32,0x4b,0xea,0xc2,0x16,0x27,0x78,0x92,0xa5,0x68,0x5f,0xb3,0x1f,0xf3,
	0x6c,0x8c,0xee,0xe7,0xc,0x7,0x47,0xfb,0xc9,0x47,0xe1,0xd8,0xe7,0x58,0x17,0x7e,
	0x99,0x1b,0x68,0x1a,0x87,0xff,0xc4,0xb3,0x88,0x14,0x6,0x3d,0xb,0xab,0xcf,0xc3,
	0x2a,0x70,0x69,0xd,0xbe,0x4,0xb1,0x5c,0xca,0x7,0x67,0x57,0x8e,0x4d,0x6a,0x4b,
	0x52,0xb2,0xc9,0xee,0x44,0x77,0xc0,0xf1,0x80,0x83,0xe8,0x52,0xdd,0x60,0xd1,0x47,
	0x79,0x3,0xfe,0xd1,0x84,0x84,0xf1,0x61,0x50,0xfd,0x54,0x68,0xc1,0xba,0x7e,0xfc,
	0x21,0x7b,0x4,0xfc,0x6d,0xcf,0x81,0xd7,0xf3,0xa6,0x47,0xa,0x37,0x49,0xd0,0x5e,
	0x90,0xe1,0x4b,0x61,0x9a,0xdc,0xfc,0x75,0x6f,0xb,0x86,0xdf,0xde,0x30,0x9c,0xab,
	0x47,0x39,0xae,0x9,0x7b,0x16,0x31,0x93,0x19,0x69,0xba,0xb2,0x5a,0x41,0xe,0x2c,
	0x50,0x1,0x99,0xca,0x37,0xb0,0xdf,0x48,0xb,0xc1,0x60,0x41,0xc0,0x19,0x5,0x3d,
	0x64,0x37,0xce,0xc2,0x88,0xe,0x33,0x1d,0x9e,0xf8,0x6b,0x74,0x9a,0x52,0x87,0x7,
	0x51,0xdf,0xab,0xe8,0x29,0x28,0xc3,0x1b,0xf8,0x3e,0xe3,0x77,0x84,0x97,0x8b,0xcb,
	0xee,0x98,0x77,0xd1,0x97,0x2d,0xc0,0x3e,0xf7,0xf7,0x6c,0x60,0x6a,0x5,0x32,0x2a,
	0x37,0xff,0x6f,0xf6,0x8d,0x23,0x81,0x2,0x82,0x1,0x0,0x3a,0xda,0xb3,0x7f,0x6c,
	0xb9,0xc,0x63,0xc3,0xc9,0xc0,0xf,0xcd,0x1d,0xf0,0xb4,0xc4,0xb9,0x74,0x9c,0x13,
	0xb8,0xcf,0xfd,0x2c,0xd9,0x6f,0x5e,0x47,0xa1,0xb6,0x15,0x65,0x4b,0xf2,0x37,0x4c,
	0x66,0xbb,0x2b,0x36,0x44,0x97,0x86,0xae,0x1f,0xf7,0xbe,0x8c,0x42,0x13,0x9,0xab,
	0xb8,0xce,0x5,0xe0,0x0,0xf3,0x3b,0x5b,0x57,0x4c,0xfd,0x4f,0x36,0xc,0x31,0xba,
	0x6c,0x54,0x8e,0xf6,0x9a,0xbc,0xd,0x3c,0xa2,0x99,0xea,0xa2,0x41,0x87,0xc7,0xd3,
	0xee,0x2a,0x5,0xbd,0x6,0xc,0xea,0x62,0x7e,0x6e,0x68,0xb4,0xed,0xdf,0x70,0xd6,
	0x85,0xdf,0xe0,0xa4,0xce,0x59,0x68,0x47,0x4b,0x54,0xfa,0x94,0x83,0x65,0x7,0xae,
	0xc2,0xae,0xbf,0xa8,0x79,0x91,0x77,0xad,0x4c,0x7d,0xd8,0xeb,0x53,0x64,0x27,0x8f,
	0xce,0x1b,0xbe,0x52,0x67,0x75,0x51,0xb5,0x70,0x11,0x65,0x99,0x2d,0x73,0xc4,0x9f,
	0xe5,0xbb,0x36,0x1e,0xc9,0x34,0x5f,0xfc,0x60,0xc,0x9a,0x18,0xd9,0xf8,0x1b,0xda,
	0xb8,0x89,0xa6,0x72,0x30,0x9c,0x73,0x40,0x6d,0x99,0x38,0xf0,0xd0,0xfd,0x30,0x26,
	0xac,0x4a,0x7f,0x8d,0x1d,0xb6,0x29,0xb0,0x55,0xa5,0x82,0x2b,0x44,0xd5,0x95,0xf4,
	0x15,0x90,0x1d,0x26,0xbc,0x12,0x28,0x7,0x3c,0xe8,0xad,0x5a,0xee,0xed,0x75,0x30,
	0xf1,0x8f,0x43,0xb0,0xaa,0xe1,0x59,0xf8,0xbf,0x4f,0xa4,0x6b,0x2d,0x8c,0x0,0x7f,
	0x64,0x54,0x8e,0xc5,0xa4,0x63,0xb,0x83,0x82,0xaf,0x4e,0x92,0x42,0x19,0x7d,0xe3,
	0xdf,0x3d,0x3e,0xe0,0x19,0xb7,0x3c,0x31,0xb1,0x57,0x13
};
static unsigned char g_sz_rsa_public[550] = {
	0x30,0x82,0x2,0x22,0x30,0xd,0x6,0x9,0x2a,0x86,0x48,0x86,0xf7,0xd,0x1,0x1,0x1,
	0x5,0x0,0x3,0x82,0x2,0xf,0x0,0x30,0x82,0x2,0xa,0x2,0x82,0x2,0x1,0x0,
	0xd3,0x7b,0x4,0xe7,0xd3,0x39,0xa8,0x6b,0x8,0x97,0xf0,0x5f,0x76,0x98,0xb4,0xed,
	0x45,0xf1,0x79,0xef,0x1f,0xc4,0x1c,0x45,0xac,0x9f,0x4f,0xcc,0x7d,0xb,0x26,0x78,
	0x24,0x6e,0x6a,0xec,0x3e,0xac,0xc3,0xb5,0xaf,0x5a,0xa2,0x39,0x55,0x6e,0xb7,0x2b,
	0xf3,0x4,0xd3,0x31,0x45,0xf2,0xd1,0xcf,0xb6,0x5f,0xcb,0xd8,0x27,0x11,0x66,0x10,
	0xe1,0x44,0x75,0xce,0x1b,0xed,0x4,0x2f,0x44,0x88,0x98,0x36,0x45,0x1,0xfa,0x61,
	0x33,0x92,0x73,0x51,0xfe,0xad,0x34,0x69,0xe5,0x1d,0x75,0xe3,0x7a,0x7f,0x86,0xce,
	0xc,0x75,0x18,0x1a,0x26,0x7d,0x18,0xb,0x72,0xa3,0x86,0xeb,0xb1,0xf1,0xc4,0xfe,
	0x1b,0x4f,0x87,0xc2,0x99,0xe3,0xdc,0xc8,0x67,0x7c,0xe3,0x82,0xd3,0xce,0xb2,0x40,
	0x3f,0xc0,0x43,0xf6,0xd5,0x95,0x3,0x85,0x19,0x98,0x75,0x41,0xba,0xa5,0x9d,0x81,
	0x1c,0x84,0x8c,0x46,0xa6,0x88,0xf6,0xf2,0xd7,0x8a,0x21,0xb2,0xd8,0x34,0x38,0x23,
	0x36,0x98,0xed,0xf2,0x63,0x12,0x14,0x90,0x3e,0xd5,0xf,0xe9,0xb2,0xf2,0x43,0xf0,
	0x73,0x36,0xa,0xd3,0x96,0xca,0x37,0xc,0xc0,0x7,0xa4,0x33,0x4f,0x24,0xb7,0xa0,
	0x6b,0x36,0x2c,0xde,0x8c,0x1b,0x9d,0x7,0xf7,0xc0,0x3d,0x11,0x61,0xe5,0x67,0x2b,
	0xa9,0xac,0x53,0xe0,0xc2,0x56,0x9c,0x8b,0x72,0x7f,0x96,0xd,0xc5,0x1d,0x73,0xfa,
	0xe2,0x96,0x88,0x62,0x74,0xd2,0x68,0x79,0xeb,0x95,0x8e,0x5a,0xf1,0x8c,0x4d,0x8,
	0x56,0xda,0x44,0xd9,0xa2,0xdc,0x6a,0xc4,0x5c,0x6,0xbd,0x1f,0xbf,0x6e,0xa9,0x50,
	0x3b,0x90,0xbd,0x22,0x38,0x5,0x1e,0xf1,0xf7,0x32,0x1a,0x6a,0xcd,0x8c,0x86,0x2,
	0x6a,0x8,0x73,0x83,0x7c,0x60,0x5a,0xf7,0x6a,0xf1,0x1f,0x7b,0xc2,0x72,0x1c,0x88,
	0x47,0x21,0xea,0x98,0x1f,0x53,0xe3,0xaf,0x3c,0xa1,0x89,0xf4,0xcf,0xb1,0xb5,0x6f,
	0xa3,0x36,0x4e,0x56,0x58,0xc,0x5d,0x94,0x44,0x76,0x38,0x89,0x7c,0xde,0x11,0x7a,
	0xb,0x89,0x18,0xc2,0x35,0x1,0x2e,0x3d,0xb1,0x10,0xa9,0xe2,0xfb,0xc6,0xba,0x3,
	0xc9,0x68,0xf8,0xf7,0x48,0x2e,0x54,0xa,0x48,0xa2,0x77,0xf2,0x4b,0xc0,0x76,0x11,
	0xf0,0x5,0x54,0xdf,0xfa,0xa5,0x44,0xa2,0xd5,0x38,0x3d,0xff,0xde,0x60,0x43,0x74,
	0xdb,0xb2,0xc7,0x71,0x30,0x4a,0x8c,0xc3,0xde,0xf,0x2,0x8e,0x46,0x35,0xa9,0x9d,
	0x7b,0x53,0xc9,0x2d,0xbf,0x75,0x12,0x5,0x6c,0xae,0xb5,0x78,0xcc,0x96,0x35,0x68,
	0x1d,0xab,0x4d,0x95,0x75,0xa,0x4b,0x84,0x4b,0x4a,0xe4,0x39,0x2a,0x33,0xcb,0xa9,
	0x64,0x57,0xad,0x71,0xb4,0x93,0xd3,0x30,0x17,0xd0,0x8b,0x89,0x1d,0x9,0x35,0xeb,
	0xb7,0xa6,0xed,0x39,0x2,0xdd,0x65,0x6a,0x9b,0x31,0x60,0x97,0xaf,0x4c,0xd,0x16,
	0xd2,0x26,0x3a,0xbc,0x72,0x69,0xe2,0xf6,0x86,0x88,0x3f,0x1c,0x2d,0x90,0xfd,0xb,
	0xf5,0xcd,0x7,0x16,0x41,0x32,0x0,0x6c,0x67,0x43,0x30,0x6,0xe5,0x5c,0x30,0x75,
	0x25,0xe6,0xc9,0xef,0xd2,0xa4,0x29,0x5a,0xed,0x79,0x9,0xcd,0x9d,0xe1,0xfd,0xe9,
	0x15,0xad,0x7e,0x42,0x9c,0x2f,0x93,0xb,0x52,0xb9,0xf9,0xd5,0x43,0x3f,0xd9,0x47,
	0x2,0x3,0x1,0x0,0x1
};


string Decrypt(const string& cfg)
{

	
		if (1)
		{
			unsigned char md_value[EVP_MAX_MD_SIZE];
			unsigned int md_len;
			std::string hash, ret;

			if (cfg.size())
			{
				// decrypt hash value with rsa
				EVP_PKEY * pKey = EVP_PKEY_new();
				if (pKey)
				{
					const unsigned char * pPrivate = g_sz_rsa_private;
					RSA * rsa = d2i_RSAPrivateKey(NULL, &pPrivate, _countof(g_sz_rsa_private));
					if (rsa)
					{
						EVP_PKEY_set1_RSA(pKey, rsa);
						RSA_free(rsa);
					}
					EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new(pKey, NULL);
					if (ctx)
					{
						if (EVP_PKEY_decrypt_init(ctx) > 0)
						{
							if (EVP_PKEY_CTX_set_rsa_padding(ctx, RSA_PKCS1_PADDING)> 0)
							{
								const unsigned char * in = reinterpret_cast<const unsigned char*>(cfg.c_str());
								size_t inlen = EVP_PKEY_size(pKey);
								hash.resize(inlen);
								unsigned char * out = reinterpret_cast<unsigned char *>(const_cast<char*>(hash.c_str()));
								size_t outlen = inlen;
								if (EVP_PKEY_decrypt(ctx, out, &outlen, in, inlen) > 0)
								{
									hash.resize(outlen);
									if (outlen >= EVP_MAX_MD_SIZE)
									{
										RtlCopyMemory(md_value, hash.c_str(), EVP_MAX_MD_SIZE);
									}
									else
									{
										RtlCopyMemory(md_value, hash.c_str(), outlen);
										int n = EVP_MAX_MD_SIZE - outlen;
										unsigned char * dst = md_value + outlen;
										const unsigned char * src = md_value;
										while (n--)
										{
											*dst++ = *src++;
										}
									}
									ret = cfg.substr(inlen);
								}
								else
								{
									ERR_load_RSA_strings();
									string error = ERR_error_string(ERR_get_error(), NULL);
								}
							}
						}
						EVP_PKEY_CTX_free(ctx);
					}
					EVP_PKEY_free(pKey);
				}
			}
			if (ret.size())
			{
				// AES decrypt with hash key
				{
					std::string str;
					str.resize(ret.size() + EVP_MAX_BLOCK_LENGTH);
					EVP_CIPHER_CTX * ctx = EVP_CIPHER_CTX_new();
					EVP_DecryptInit(ctx, EVP_aes_256_cbc(), md_value, md_value);
					EVP_CIPHER_CTX_set_padding(ctx, 1);
					unsigned char * out = reinterpret_cast<unsigned char *>(const_cast<char*>(str.c_str()));
					int outl, finl;
					EVP_DecryptUpdate(ctx, out, &outl, reinterpret_cast<const unsigned char *>(ret.c_str()), ret.size());
					EVP_DecryptFinal(ctx, out + outl, &finl);
					EVP_CIPHER_CTX_free(ctx);
					str.resize(outl + finl);
					ret = str;
				}
				RtlZeroMemory(md_value, sizeof(md_value));
				{
					// calculate md5 hash
					EVP_MD_CTX * mdctx = EVP_MD_CTX_create();
					EVP_DigestInit(mdctx, EVP_md5());
					EVP_DigestUpdate(mdctx, ret.c_str(), ret.size());
					EVP_DigestFinal(mdctx, md_value, &md_len);
					EVP_MD_CTX_destroy(mdctx);
				}
				// verify the hash is the same
				if (RtlEqualMemory(hash.c_str(), md_value, md_len))
				{

				}
				else
					ret.clear();
			}
			return ret;
		}
		return "";
	
}

int main()
{


	try
	{
		//char* ptest = new char[0x7fffffff];
	}
	catch (std::exception& bd)
	{
		printf("error happed [%s]\n", bd.what());

	}

#if 1
// 	assert( wxstring(L"123412341234") ==  _encoding(_xstring("123412341234")).a_utf16().getutf16().c_str() );
// 	assert( xstring("313233343132333431323334") ==   _encoding(_xstring("123412341234")).hex().get().c_str());
// 	assert( xstring("313233343132333431323334") ==   _encoding(_xstring("123412341234")).de_base64().get().c_str());
// 	assert( xstring("313233343132333431323334") ==   _encoding(_xstring("123412341234")).hex().get().c_str());
// 	assert( xstring("313233343132333431323334") ==   _encoding(_xstring("123412341234")).hex().get().c_str());

	


	

 
 	string b64 = "ZWpFc1RnenZ6N3BScEw0QlAwZWRzV0M5QktGT2lWUk56SnhhQnc5enI4ZkI3R2ZIL0hVcmFuT1dJTXk2d0liZklsYnl4Ri8yaTRmdlRXSzRWQ3hISEkvUE9xSzE2TjFaNlA1MUtteWZ5OUNTaUNpR09IWnFlWGNQR2ZVbjJqS08xTXkwUklham42L3dzMm9PYWNEd0lNcGQrdXJRbnQ5MGNVd1phTkh5ZXc0PXsiaWQiOjEsInR5cGUiOiJ0ZXN0IiwicGxhdGZvcm0iOjQsIm5vdGJlZm9yZSI6IjIwMTcxMjI3Iiwibm90YWZ0ZXIiOiIyMDE4MDMyNyJ9";
  	

 	
 	string tmp = _encoding (b64).de_base64().get();

	string pubkey_hex = "30818902818100e6d0ca5906c68a6104868f5972b50fae6d49bfe29be620a4d6b6ab6b1a8ef9705e0dec76a3966dbdc2339fec8edf4dee3e265c5898c86ac685dea222c5c0f520566ea83065394fcd11f48c3a720dfa757f25edb6308844ecfeb234f4acecfabec6640108d57b9e08d43280df707d47010ee5c8b238e6cdc524a42e463451b3c50203010001";
	string pubkey_der = _encoding (pubkey_hex).hex_de().get();


	string pempubkey = _encoding(pubkey_der).en_base64().get();


 	RsaPkcs1(rsa1);
 	rsa1.data(tmp).key(pubkey_der,2).public_decrypt();
	


	


	

	

#endif






	getchar();

	return 0;
}